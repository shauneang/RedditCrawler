import fs from "fs";
import path from "path";
import PDFDocument from "pdfkit";
import { db } from "../database";

/**
 * Generate a valid PDF report and return its file path
 */
export const generateReport = async (): Promise<string> => {
    return new Promise((resolve, reject) => {
        try {
            const filePath = path.join(__dirname, "../../top_memes_report.pdf");
            const doc = new PDFDocument(); // Create a new PDF document
            const stream = fs.createWriteStream(filePath);

            doc.pipe(stream); // Pipe to a file
            doc.fontSize(20).text("üìä Report Title", { align: "center" });
            doc.moveDown();
            doc.fontSize(14).text("This is a test report generated by the Telegram bot.");
            doc.moveDown();
            doc.text("Generated on: " + new Date().toLocaleString());

            doc.end(); // Finalize the PDF

            stream.on("finish", () => resolve(filePath)); // Resolve when finished
            stream.on("error", (err) => reject(err));
        } catch (error) {
            reject(error);
        }
    });
};

/**
 * Get top memes for the latest hour from Firestore.
 * If no data exists for the requested hour, fetch the latest available memes.
 */
export const getHourlyTopMemes = async (hour: Date): Promise<FirebaseFirestore.DocumentData[]> => {
    try {
        let snapshot = await db
            .collection("top_memes")
            .where("fetch_timestamp", "==", hour)
            .orderBy("score", "desc") // Sort by score (best memes first)
            .limit(20)
            .get();

        let memes = snapshot.docs.map((doc) => doc.data());

        // If no memes are found for the requested hour, get the latest available memes
        if (memes.length === 0) {
            console.log("‚ö†Ô∏è No memes found for the requested hour. Fetching latest available memes...");

            snapshot = await db
                .collection("top_memes")
                .orderBy("fetch_timestamp", "desc") // Get the latest timestamped memes
                .orderBy("score", "desc") // Sort by score within the latest timestamp
                .limit(20)
                .get();

            memes = snapshot.docs.map((doc) => doc.data());
        }

        return memes;
    } catch (error) {
        console.error("‚ùå Error fetching memes:", error);
        return [];
    }
};